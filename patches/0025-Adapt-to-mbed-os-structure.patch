From 4411a69d0f68d03e617c0858c1933154cff1eac0 Mon Sep 17 00:00:00 2001
From: Martino Facchin <m.facchin@arduino.cc>
Date: Fri, 12 Feb 2021 13:30:32 +0100
Subject: [PATCH 25/67] Adapt to mbed-os structure

---
 .../common/pico_base/include/pico/config.h    |  2 --
 .../pico-sdk/generated/pico/version.h         | 19 ++++++++++++++++++
 .../pico-sdk/rp2_common/hardware_gpio/gpio.c  |  4 ++--
 .../hardware_gpio/include/hardware/gpio.h     |  2 +-
 .../rp2_common/pico_runtime/runtime.c         | 20 ++++++++++---------
 .../rp2_common/pico_standard_link/crt0.S      | 20 +++++++++----------
 6 files changed, 43 insertions(+), 24 deletions(-)
 create mode 100644 targets/TARGET_RASPBERRYPI/TARGET_RP2040/pico-sdk/generated/pico/version.h

diff --git a/targets/TARGET_RASPBERRYPI/TARGET_RP2040/pico-sdk/common/pico_base/include/pico/config.h b/targets/TARGET_RASPBERRYPI/TARGET_RP2040/pico-sdk/common/pico_base/include/pico/config.h
index 20f32cb906..a0d5c0b405 100644
--- a/targets/TARGET_RASPBERRYPI/TARGET_RP2040/pico-sdk/common/pico_base/include/pico/config.h
+++ b/targets/TARGET_RASPBERRYPI/TARGET_RP2040/pico-sdk/common/pico_base/include/pico/config.h
@@ -16,6 +16,4 @@
 // PICO_CONFIG_HEADER_FILES and then PICO_SDK_<PLATFORM>_CONFIG_INCLUDE_FILES
 // entries are dumped in order at build time into this generated header
 
-#include "pico/config_autogen.h"
-
 #endif
\ No newline at end of file
diff --git a/targets/TARGET_RASPBERRYPI/TARGET_RP2040/pico-sdk/generated/pico/version.h b/targets/TARGET_RASPBERRYPI/TARGET_RP2040/pico-sdk/generated/pico/version.h
new file mode 100644
index 0000000000..7b537522f9
--- /dev/null
+++ b/targets/TARGET_RASPBERRYPI/TARGET_RP2040/pico-sdk/generated/pico/version.h
@@ -0,0 +1,19 @@
+/*
+ * Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+// ---------------------------------------
+// THIS FILE IS AUTOGENERATED; DO NOT EDIT
+// ---------------------------------------
+
+#ifndef _PICO_VERSION_H
+#define _PICO_VERSION_H
+
+#define PICO_SDK_VERSION_MAJOR    1
+#define PICO_SDK_VERSION_MINOR    0
+#define PICO_SDK_VERSION_REVISION 1
+#define PICO_SDK_VERSION_STRING   "1.0.1"
+
+#endif
diff --git a/targets/TARGET_RASPBERRYPI/TARGET_RP2040/pico-sdk/rp2_common/hardware_gpio/gpio.c b/targets/TARGET_RASPBERRYPI/TARGET_RP2040/pico-sdk/rp2_common/hardware_gpio/gpio.c
index 34be86cb97..7051de309a 100644
--- a/targets/TARGET_RASPBERRYPI/TARGET_RP2040/pico-sdk/rp2_common/hardware_gpio/gpio.c
+++ b/targets/TARGET_RASPBERRYPI/TARGET_RP2040/pico-sdk/rp2_common/hardware_gpio/gpio.c
@@ -151,7 +151,7 @@ void gpio_set_input_enabled(uint gpio, bool enabled) {
         hw_clear_bits(&padsbank0_hw->io[gpio], PADS_BANK0_GPIO0_IE_BITS);
 }
 
-void gpio_init(uint gpio) {
+void _gpio_init(uint gpio) {
     sio_hw->gpio_oe_clr = 1ul << gpio;
     sio_hw->gpio_clr = 1ul << gpio;
     gpio_set_function(gpio, GPIO_FUNC_SIO);
@@ -160,7 +160,7 @@ void gpio_init(uint gpio) {
 void gpio_init_mask(uint gpio_mask) {
     for(uint i=0;i<32;i++) {
         if (gpio_mask & 1) {
-            gpio_init(i);
+            _gpio_init(i);
         }
         gpio_mask >>= 1;
     }
diff --git a/targets/TARGET_RASPBERRYPI/TARGET_RP2040/pico-sdk/rp2_common/hardware_gpio/include/hardware/gpio.h b/targets/TARGET_RASPBERRYPI/TARGET_RP2040/pico-sdk/rp2_common/hardware_gpio/include/hardware/gpio.h
index f4a43aada2..563c6a0137 100644
--- a/targets/TARGET_RASPBERRYPI/TARGET_RP2040/pico-sdk/rp2_common/hardware_gpio/include/hardware/gpio.h
+++ b/targets/TARGET_RASPBERRYPI/TARGET_RP2040/pico-sdk/rp2_common/hardware_gpio/include/hardware/gpio.h
@@ -305,7 +305,7 @@ void gpio_acknowledge_irq(uint gpio, uint32_t events);
  *
  * \param gpio GPIO number
  */
-void gpio_init(uint gpio);
+void _gpio_init(uint gpio);
 
 /*! \brief Initialise multiple GPIOs (enabled I/O and set func to GPIO_FUNC_SIO)
  *  \ingroup hardware_gpio
diff --git a/targets/TARGET_RASPBERRYPI/TARGET_RP2040/pico-sdk/rp2_common/pico_runtime/runtime.c b/targets/TARGET_RASPBERRYPI/TARGET_RP2040/pico-sdk/rp2_common/pico_runtime/runtime.c
index dba0d3c6be..4ae876f5b9 100644
--- a/targets/TARGET_RASPBERRYPI/TARGET_RP2040/pico-sdk/rp2_common/pico_runtime/runtime.c
+++ b/targets/TARGET_RASPBERRYPI/TARGET_RP2040/pico-sdk/rp2_common/pico_runtime/runtime.c
@@ -20,7 +20,8 @@
 
 #include "pico/mutex.h"
 #include "pico/time.h"
-#include "pico/printf.h"
+// Use mbed printf
+//#include "pico/printf.h"
 
 #if PICO_ENTER_USB_BOOT_ON_EXIT
 #include "pico/bootrom.h"
@@ -140,7 +141,8 @@ void runtime_init(void) {
 
     spin_locks_reset();
     irq_init_priorities();
-    alarm_pool_init_default();
+    // This calls malloc() which is forbidden in mbed before switching to thread context
+    // alarm_pool_init_default();
 
     // Start and end points of the constructor list,
     // defined by the linker script.
@@ -156,7 +158,7 @@ void runtime_init(void) {
 
 }
 
-void _exit(int status) {
+void __exit(int status) {
 #if PICO_ENTER_USB_BOOT_ON_EXIT
     reset_usb_boot(0,0);
 #else
@@ -166,7 +168,7 @@ void _exit(int status) {
 #endif
 }
 
-void *_sbrk(int incr) {
+void *__sbrk(int incr) {
     extern char end; /* Set by linker.  */
     static char *heap_end;
     char *prev_heap_end;
@@ -195,18 +197,18 @@ void *_sbrk(int incr) {
 
 // exit is not useful... no desire to pull in __call_exitprocs
 void exit(int status) {
-    _exit(status);
+    __exit(status);
 }
 
 // incorrect warning from GCC 6
 #pragma GCC diagnostic push
 #pragma GCC diagnostic ignored "-Wsuggest-attribute=format"
 void __assert_func(const char *file, int line, const char *func, const char *failedexpr) {
-    weak_raw_printf("assertion \"%s\" failed: file \"%s\", line %d%s%s\n",
+    printf("assertion \"%s\" failed: file \"%s\", line %d%s%s\n",
            failedexpr, file, line, func ? ", function: " : "",
            func ? func : "");
 
-    _exit(1);
+    exit(1);
 }
 
 #pragma GCC diagnostic pop
@@ -232,14 +234,14 @@ void __attribute__((noreturn)) __printflike(1, 0) panic(const char *fmt, ...) {
 #if PICO_PRINTF_ALWAYS_INCLUDED
         vprintf(fmt, args);
 #else
-        weak_raw_vprintf(fmt, args);
+        vprintf(fmt, args);
 #endif
         va_end(args);
         puts("\n");
 #endif
     }
 
-    _exit(1);
+    exit(1);
 }
 
 void hard_assertion_failure(void) {
diff --git a/targets/TARGET_RASPBERRYPI/TARGET_RP2040/pico-sdk/rp2_common/pico_standard_link/crt0.S b/targets/TARGET_RASPBERRYPI/TARGET_RP2040/pico-sdk/rp2_common/pico_standard_link/crt0.S
index 95a44ff4a6..38de608634 100644
--- a/targets/TARGET_RASPBERRYPI/TARGET_RP2040/pico-sdk/rp2_common/pico_standard_link/crt0.S
+++ b/targets/TARGET_RASPBERRYPI/TARGET_RP2040/pico-sdk/rp2_common/pico_standard_link/crt0.S
@@ -28,19 +28,19 @@ __vectors:
 .word __StackTop
 .word _reset_handler
 .word isr_nmi
-.word isr_hardfault
+.word HardFault_Handler
+.word MemManage_Handler
+.word BusFault_Handler
+.word UsageFault_Handler
 .word isr_invalid // Reserved, should never fire
 .word isr_invalid // Reserved, should never fire
 .word isr_invalid // Reserved, should never fire
 .word isr_invalid // Reserved, should never fire
+.word SVC_Handler
 .word isr_invalid // Reserved, should never fire
 .word isr_invalid // Reserved, should never fire
-.word isr_invalid // Reserved, should never fire
-.word isr_svcall
-.word isr_invalid // Reserved, should never fire
-.word isr_invalid // Reserved, should never fire
-.word isr_pendsv
-.word isr_systick
+.word PendSV_Handler
+.word SysTick_Handler
 .word isr_irq0
 .word isr_irq1
 .word isr_irq2
@@ -241,9 +241,9 @@ bss_fill_test:
 platform_entry: // symbol for stack traces
     // Use 32-bit jumps, in case these symbols are moved out of branch range
     // (e.g. if main is in SRAM and crt0 in flash)
-    ldr r1, =runtime_init
-    blx r1
-    ldr r1, =main
+    //ldr r1, =runtime_init
+    //blx r1
+    ldr r1, =_start
     blx r1
     ldr r1, =exit
     blx r1
-- 
2.30.1

